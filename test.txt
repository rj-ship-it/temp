
BEGIN;

WITH batch AS (
    SELECT a.account_id
    FROM credit_card_accounts a
    WHERE a.is_business_account IS NULL
      AND EXISTS (
          SELECT 1 
          FROM credit_card_company_account_relations r
          WHERE r.account_id = a.account_id
      )
    LIMIT 50000          -- adjust batch size (start small)
)
UPDATE credit_card_accounts a
SET is_business_account = TRUE
FROM batch
WHERE a.account_id = batch.account_id;

COMMIT;


BEGIN;

WITH batch AS (
    SELECT a.account_id
    FROM credit_card_accounts a
    WHERE a.is_business_account IS NULL
      AND NOT EXISTS (
          SELECT 1 
          FROM credit_card_company_account_relations r
          WHERE r.account_id = a.account_id
      )
    LIMIT 50000
)
UPDATE credit_card_accounts a
SET is_business_account = FALSE
FROM batch
WHERE a.account_id = batch.account_id;

COMMIT;



===================
While reviewing the schema, I noticed that the column already has a default value set to false, but I don’t see a NOT NULL constraint defined on it.
Since the data is now corrected and the code ensures valid values, this might be a good time to add that constraint for better data integrity.

If you can take care of adding this schema correction along with the data patch release, that would be great — it’ll help keep things consistent going forward.




-- NULL business flag that HAVE a company relation (should become TRUE)
select count(*) as null_to_true
from credit_card_accounts a
where a.is_business_account is null
  and exists (
        select 1 from credit_card_company_account_relations r
        where r.account_id = a.account_id
  );

-- NULL business flag that DO NOT have a company relation (should become FALSE)
select count(*) as null_to_false
from credit_card_accounts a
where a.is_business_account is null
  and not exists (
        select 1 from credit_card_company_account_relations r
        where r.account_id = a.account_id
  );

begin;

-- Optional: keep an audit of rows being changed
create temporary table _acct_business_fix_audit as
select a.account_id,
       a.is_business_account as old_is_business_account,
       case when exists (
                 select 1 from credit_card_company_account_relations r
                 where r.account_id = a.account_id
            )
            then true else false end as new_is_business_account
from credit_card_accounts a
where a.is_business_account is null;

-- Update all NULLs based on relation existence
update credit_card_accounts a
set is_business_account = case
    when exists (
         select 1 from credit_card_company_account_relations r
         where r.account_id = a.account_id
    ) then true
    else false
end
where a.is_business_account is null;

commit;

========
-- Company accounts -> TRUE
update credit_card_accounts a
set is_business_account = true
where a.is_business_account is null
  and exists (select 1 from credit_card_company_account_relations r
              where r.account_id = a.account_id);

-- Consumer accounts -> FALSE
update credit_card_accounts a
set is_business_account = false
where a.is_business_account is null
  and not exists (select 1 from credit_card_company_account_relations r
                  where r.account_id = a.account_id);

======

-- Should be zero after the fix
select count(*) as remaining_nulls
from credit_card_accounts
where is_business_account is null;

-- Sanity: spot check distribution
select is_business_account, count(*)
from credit_card_accounts
group by is_business_account;


